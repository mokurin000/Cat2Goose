import yaml

from os import environ
from sys import argv, stderr
from functools import partial
from collections.abc import Iterable
from importlib.metadata import version

from cat2goose.const import DEFAULT_OUTBOUNDS
from cat2goose.model import GooseRule
from cat2goose.utils import translate
from cat2goose.format import fewest_lines, absolute_semantic

ABSOLUTE: bool = environ.get("ABSOLUTE") == "1"


def main():
    if len(argv) < 2:
        print(
            "Usage:",
            "    python -m cat2goose <config_path> [<origin_group>:<redirected> ...]",
            "Example:",
            "    # for a service, redirects Netflix&Pornhub to MITM proxy node",
            "    python -m cat2goose ykk.yaml Netflix:ykkmitm Pornhub:ykkmitm",
            "",
            "    # semantic-perfect, follow clash rule priority",
            "    ABSOLUTE=1 python -m cat2goose ykk.yaml Netflix:ykkmitm Pornhub:ykkmitm",
            file=stderr,
            sep="\n",
        )
        exit(1)

    yaml_path = argv[1]
    rename_map = {}

    with open(yaml_path, "r", encoding="utf-8") as f:
        data = yaml.load(f, Loader=yaml.Loader)

    for arg in argv[2:]:
        origin, new = arg.split(":")
        rename_map[origin] = new

    groups = set()

    if "rules" not in data:
        print("'rules' not found!", file=stderr)
        return

    goose_rules: Iterable[GooseRule] = filter(
        lambda rule: rule is not None,
        map(partial(translate, groups, rename_map), data["rules"]),
    )

    # Must consume iterator to warm `groups` set
    if ABSOLUTE:
        output = absolute_semantic(goose_rules)
    else:
        output = fewest_lines(goose_rules)

    groups = sorted(group for group in groups if group not in DEFAULT_OUTBOUNDS)

    package_name = __spec__.name.split(".")[0]
    package_version = version(package_name)
    print(f"# generated by {package_name} v{package_version}")

    if groups:
        groups = ", ".join(sorted(groups))
        print(f"# groups: {groups}")
    print(output)


if __name__ == "__main__":
    main()
