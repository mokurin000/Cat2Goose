import yaml

from sys import argv, stderr
from collections.abc import Iterable
from functools import partial
from importlib.metadata import version

from cat2goose.const import DEFAULT_OUTBOUNDS
from cat2goose.model import GooseRule
from cat2goose.utils import translate


def main():
    yaml_path = argv[1]
    rename_map = {}

    with open(yaml_path, "r", encoding="utf-8") as f:
        data = yaml.load(f, Loader=yaml.Loader)

    for arg in argv[2:]:
        origin, new = arg.split(":")
        rename_map[origin] = new

    groups = set()

    if "rules" not in data:
        print("'rules' not found!", file=stderr)
        return

    goose_rules: Iterable[GooseRule] = filter(
        lambda rule: rule is not None,
        map(partial(translate, groups, rename_map), data["rules"]),
    )
    goose_groups: dict[tuple[str, str], set[str]] = {}
    for goose_rule in goose_rules:
        group_key = (goose_rule.rule_type, goose_rule.target_group)
        goose_groups[group_key] = goose_groups.get(group_key, set())
        goose_groups[group_key].add(goose_rule.content)

    groups = sorted(group for group in groups if group not in DEFAULT_OUTBOUNDS)

    package_name = __spec__.name.split(".")[0]
    package_version = version(package_name)
    print(f"# generated by {package_name} v{package_version}")
    if groups:
        groups = ", ".join(sorted(groups))
        print(f"# groups: {groups}")

    for (rule_type, target_group), contents in goose_groups.items():
        content = ", ".join(sorted(contents))
        print(f"{rule_type}({content}) -> {target_group}")


if __name__ == "__main__":
    main()
